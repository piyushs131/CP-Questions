class Solution {
public:
    int strongPasswordChecker(string s) {
        if (s.size() == 0) {
            return 6;
        }

        if (s.size() == 1) {
            return 5;
        }

        int res = 0;
        unordered_map<string, int> mp;

        int i = 0;

        while (i < s.size()) {
            if (isupper(s[i])) {
                mp["up"]++;
            }

            if (islower(s[i])) {
                mp["lo"]++;
            }

            if (isdigit(s[i])) {
                mp["dg"]++;
            }

            int j = i;
            while (j < s.size() && s[i] == s[j]) {
                j++;
            }

            int len = j - i;
            if (len >= 3) {
                res += len / 3;
            }

            i = j;
        }

        int ans = 0;

        if (mp["up"] == 0) {
            ans++;
        }
        if (mp["lo"] == 0) {
            ans++;
        }
        if (mp["dg"] == 0) {
            ans++;
        }

        if (s.size() < 6) {
            return max(6 - (int)s.size(), ans);
        }

        if (s.size() > 20) {
            int len = s.size() - 20;
            vector<int> sum(3, 0);

            i = 0;

            while (i < s.size()) {
                int j = i;
                while (j < s.size() && s[i] == s[j]) {
                    j++;
                }

                int l = j - i;
                if (l >= 3) {
                    sum[l % 3]++;
                }

                i = j;
            }

            for (int k = 0; k < 3; k++) {
                if (len <= 0) break;
                int mini = min(sum[k], len / (k + 1));
                res -= mini;
                len -= mini * (k + 1);
            }

            res -= len / 3;
            return (s.size() - 20) + max(res, ans);
        }

        return max(res, ans);
    }
};