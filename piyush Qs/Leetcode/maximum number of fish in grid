class Solution {
public:
    int findMaxFish(vector<vector<int>>& grid) {

        int n = grid.size();
        int m = grid[0].size();

        int ans = 0;


        int drow[4] = { 0,0,1,-1};
        int dcol[4] = { -1, 1, 0, 0};
    
        vector<vector<int>>vis(n, vector<int>(m,0));

        for ( int i = 0; i < n; i++){
            for ( int j = 0; j < m; j ++){
                if ( grid[i][j] > 0 && ! vis[i][j]){


                    queue<pair<int,int>>q;
                    q.push({i,j});

                    vis[i][j] = true;
                    int fish = grid[i][j];

                    while( !q.empty()){

                        int x = q.front().first;
                        int y = q.front().second;
                        q.pop();

                        for ( int k = 0;  k < 4; k++){

                            int dx = drow[k] + x;
                            int dy = dcol[k] + y;

                            if ( dx >= 0 && dy >= 0 && dy < m && dx < n && grid[dx][dy] > 0 && ! vis[dx][dy] ){

                                fish += grid[dx][dy];
                                vis[dx][dy] = true;
                                q.push({dx,dy});
                            }
                        }


                    }

                    ans = max( ans, fish);

                }
            }
        }

        return ans;

        }


        
    
};