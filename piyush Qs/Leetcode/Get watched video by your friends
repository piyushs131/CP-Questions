class Solution {
public:
    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {
        int n = friends.size();
        queue<pair<int, int>> q;
        vector<int> ans;
        vector<int> vis(n, 0);
        map<string, int> mp;

        q.push({id, 0});
        vis[id] = 1;

        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();

            if (y == level) {
                ans.push_back(x);
                continue;
            }

            for (auto it1 : friends[x]) {
                if (!vis[it1]) {
                    vis[it1] = 1;
                    q.push({it1, y + 1});
                }
            }
        }

        for (auto x : ans) {
            for (auto res : watchedVideos[x]) {
                mp[res]++;
            }
        }

        vector<pair<int, string>> temp;
        for (auto &[video, freq] : mp) {
            temp.push_back({freq, video});
        }

        sort(temp.begin(), temp.end());

        vector<string> answer;
        for (auto &[freq, video] : temp) {
            answer.push_back(video);
        }

        return answer;
    }
};
